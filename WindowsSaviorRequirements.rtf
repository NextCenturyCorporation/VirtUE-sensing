{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 TimesNewRomanPS-BoldMT;\f1\froman\fcharset0 TimesNewRomanPSMT;\f2\froman\fcharset0 TimesNewRomanPS-ItalicMT;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue255;\red70\green77\blue86;
\red0\green0\blue109;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c0\c0\c100000;\cssrgb\c34510\c37647\c41176;
\cssrgb\c0\c0\c50196;}
\paperw12240\paperh14240\margl1440\margr1440
\pard\partightenfactor0

\f0\b\fs40 \cf2 \expnd0\expndtw0\kerning0
\up0 \nosupersub \ulnone \outl0\strokewidth0 \strokec2 \
\pard\partightenfactor0

\fs64 \cf2 \strokec2 Software Requirements Specification\
\pard\partightenfactor0

\fs40 \cf2 \strokec2 for\
\pard\partightenfactor0

\fs64 \cf2 \strokec2 Savior\
\pard\partightenfactor0

\fs28 \cf2 \strokec2 Version 1.0\
Prepared by Mark Sanderson\
TwoSix Labs\
March 1, 2018\
\pard\partightenfactor0

\fs36 \cf2 \strokec2 Table of Contents\
\
\pard\partightenfactor0

\fs24 \cf2 \strokec2 \
\
\
\pard\partightenfactor0

\f1\b0 \cf2 \strokec2 1. Introduction
\fs20 \cf3 \ul \ulc3 \strokec3 1
\fs24 \cf2 \ulnone \strokec2 \
2. Overall Description
\fs20 \cf3 \ul \ulc3 \strokec3 1
\fs24 \cf2 \ulnone \strokec2 \
\pard\partightenfactor0

\f0\b \cf2 \strokec2 \
\
\pard\partightenfactor0

\fs36 \cf2 \strokec2 Revision History\
\pard\partightenfactor0

\fs24 \cf2 \strokec2 Name\
Date\
Reason For Changes\
Version\
Mark Sanderson\
\pard\partightenfactor0

\f1\b0 \cf2 \strokec2 02/09/18\
First blush at writing a requirements spec\
0.1\
Mark Sanderson\
02/28/18\
Updating to include post mid-term\
0.2\
\
\pard\partightenfactor0

\f0\b\fs36 \cf2 \strokec2 Introduction\
\pard\partightenfactor0

\fs28 \cf2 \strokec2 Purpose\
\pard\sl360\slmult1\partightenfactor0

\f1\b0\fs24 \cf4 \strokec4 Windows User and Kernel sensing, targeting the Windows 10 x64 environment\
\pard\partightenfactor0

\f0\b\fs28 \cf2 \strokec2 Document Conventions\
\pard\partightenfactor0

\f2\i\b0\fs22 \cf2 \strokec2 This document does not contain any unique or unusual documentation conventions.\
\pard\partightenfactor0

\f0\i0\b\fs28 \cf2 \strokec2 Intended Audience and Reading Suggestions\
\pard\partightenfactor0

\f2\i\b0\fs22 \cf2 \strokec2 This documents intended audience is virtue/savior developers, architects and program managers\
\pard\partightenfactor0

\f0\i0\b\fs28 \cf2 \strokec2 Product Scope\
\pard\partightenfactor0

\f2\i\b0\fs22 \cf2 \strokec2 Windows Kernel Sensing Research\
\pard\partightenfactor0

\f0\i0\b\fs28 \cf2 \strokec2 References\
\pard\partightenfactor0

\f1\b0\fs24 \cf2 \strokec2 TwoSixLabs Research:\cf5 \ul \ulc5 \strokec5 https://github.com/twosixlabs/savior\cf2 \ulnone \strokec2 \
Savior Documentation:\cf5 \ul \ulc5 \strokec5 https://github.com/twosixlabs/savior/tree/master/docs\cf2 \ulnone \strokec2 \
\pard\partightenfactor0

\f0\b\fs36 \cf2 \strokec2 Overall Description\
\pard\partightenfactor0

\fs28 \cf2 \strokec2 Product Perspective\
\pard\partightenfactor0

\f2\i\b0\fs22 \cf2 \strokec2 The Windows Savior package will be a new savior sensor/probe package designed specifically to target the Windows 10 x64 environment. This package extends the current sensoring capabilities of the VirtUE/Savior system.\
\pard\partightenfactor0

\f0\i0\b\fs28 \cf2 \strokec2 Product Functions\
\pard\partightenfactor0

\f2\i\b0\fs22 \cf2 \strokec2 Initial goal will be to emulate as much as practical the current Linux based sensor system. This will include both process lists (ps) and open file handles (lsof) to be delivered as sensor data to the controlling api.\
For post mid-term deployments, VirtUE/Savior will utilize a Windows Mini-Port File System Filter installed on the target to retrieve data unavailable through user space. This data may include, but not be limited to:\
Objects associated with the kernel (PID 4) that can show file, registry keys and etc that are managed by the kernel itself\
Objects associated with protected and critical processes\
Behavioral analysis utilizing IFTTT or similar approach\
Detecting unusual driver/object utilization that might possibly detect key loggers, network taps and etc.\
\pard\partightenfactor0

\f0\i0\b\fs28 \cf2 \strokec2 User Classes and Characteristics\
\pard\partightenfactor0

\f2\i\b0\fs22 \cf2 \strokec2 The design approach will be similar to if not an exact copy of the current approach. This approach implements a design: API \uc0\u8594  Sensor(s) \u8594  Probes. Where the API is the means by which sensors communicate results. The sensors will control/manage some 'n' number of probes. Probes capture subject matter data and hand it off to probes. Probes are responsible for communicating this data back to the API.\
\pard\partightenfactor0

\f0\i0\b\fs28 \cf2 \strokec2 Operating Environment\
\pard\partightenfactor0

\f2\i\b0\fs22 \cf2 \strokec2 Windows 10 x64 1709\
Python 3.6.x\
\pard\partightenfactor0

\f0\i0\b\fs28 \cf2 \strokec2 Design and Implementation Constraints\
\pard\partightenfactor0

\f1\b0\fs24 \cf2 \strokec2 Targeted specifically for Windows 10 x64\
\pard\partightenfactor0

\f0\b\fs28 \cf2 \strokec2 User Documentation\
\pard\partightenfactor0

\f1\b0\fs24 \cf2 \strokec2 Savior walk-through: savior/blob/master/docs/walkthrough_2018_01_10.pdf\
\pard\partightenfactor0

\f0\b\fs28 \cf2 \strokec2 Assumptions and Dependencies\
\pard\partightenfactor0

\fs24 \cf2 \strokec2 Development\
\pard\partightenfactor0

\f2\i\b0\fs22 \cf2 \strokec2 Windows 10 x64\
Docker\
Visual Studio Pro\
Hyper-V\
python savior API\
python sensor wrapper\
\
\pard\partightenfactor0

\f0\i0\b\fs24 \cf2 \strokec2 Deployment\
\pard\partightenfactor0

\f2\i\b0\fs22 \cf2 \strokec2 Windows 10 x64\
Ability to load a custom driver on Windows 10 x64\
}